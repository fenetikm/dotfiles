global !p

def php_indent(snip):
        indent = int(snip.opt('g:php_indent', 2))
        spaces = ""
        for s in range(0, indent):
                spaces += " "
        snip.rv = spaces

def php_braces(snip):
    # 0 is braces on the same line
    # 1 is braces below
    braces = int(snip.opt('g:php_brace_style', 0))
    if braces == 0:
        snip.rv = " {\n"
    else:
        snip.rv = "\n"
        snip.rv += snip.mkline("")
        snip.rv += "{"

def convert_tokens(snip):
    # n = snip.buffer[snip.line].split('<token>', 1)[0]
    tokens = snip.v.text.split('<token>')
    i = 0
    body = ''
    for t in tokens:
        if i == 0:
            body = t
        else:
            if i == len(tokens) - 1:
                body += "$0" + t
            else:
                body += "$" + str(i) + t
        i = i + 1
    snip.buffer[snip.line] = ''
    snip.expand_anon(body)

endglobal

snippet vd "var_dump"
var_dump($0);
endsnippet

snippet d "die"
die($0);
endsnippet

snippet vdd "var_dump die;"
var_dump($0);
die;
endsnippet

snippet pr "print_r"
print_r($0)
endsnippet

snippet vdf "var dump to file_put_contents to temp file"
file_put_contents('temp.txt', print_r($0, true) . "\n", FILE_APPEND);
endsnippet

snippet tdo "TODO comment"
// @TODO $0
endsnippet

snippet form_textfield "Drupal Form API Textfield element" s
$form['$1'] = [
  '#type' => 'textfield',
	'#title' => $this->t('$2'),
	'#description' => $this->t('$3'),
	'#default_value' => $4,
	${5:'#required' => TRUE,}
];
$0
endsnippet

snippet form_textarea "Drupal Form API Textarea element" s
$form['$1'] = [
  '#type' => 'textarea',
	'#title' => $this->t('$2'),
	'#description' => $this->t('$3'),
	'#default_value' => $4,
	${5:'#required' => TRUE,}
];
$0
endsnippet

snippet form_item "Drupal Form API Item element" s
$form['$1'] = [
  '#type' => 'item',
	'#title' => $this->t('$2'),
	'#description' => $this->t('$3'),
];
$0
endsnippet

snippet form_text_format "Drupal Form API text_format element" s
$${1:field_config_id} = $config->get('$1');
$form['$2'] = [
  '#type' => 'text_format',
	'#title' => $this->t('$3'),
	'#description' => $this->t('$4'),
	'#format' => $$1['format'] ?? filter_default_format(),
	'#default_value' => $$1['value'] ?? '',
	${5:'#required' => TRUE,}
];
$0
endsnippet

snippet form_submit "Drupal Form API Submit element"
$form['$1'] = [
  '#type' => 'submit',
	'#value' => $this->t('$2'),
];
$0
endsnippet

snippet form_check "Drupal Form API Checkbox element"
$form['$1'] = [
  '#type' => 'checkbox',
	'#title' => $this->t('$2'),
	'#description' => $this->t('$3'),
	'#default_value' => ${4:FALSE},
];
$0
endsnippet

snippet form_select "Drupal Form API Select element"
$form['$1'] = [
  '#type' => 'select',
	'#title' => $this->t('$2'),
	'#description' => $this->t('$3'),
	'#default_value' => ${4:FALSE},
	'#options' => $5,
	${6:'#required' => TRUE,}
];
$0
endsnippet

snippet form_radios "Drupal Form API Radios element"
$form['$1'] = [
  '#type' => 'radios',
	'#title' => $this->t('$2'),
	'#description' => $this->t('$3'),
	'#default_value' => ${4:FALSE},
	'#options' => $5,
	${6:'#required' => TRUE,}
];
$0
endsnippet

snippet form_details "Drupal Form API Details element"
$form['$1'] = [

];
$0
endsnippet

snippet const "Drupal const with description"
/**
 * ${1:Description}.
 */
const $0
endsnippet

snippet var "PHP protected var with description"
/**
 * ${1:Description}
 *
 * @var $2
 */
${3:protected} $4
endsnippet

snippet var_protected_description "Drupal protected var with description"
/**
 * ${1:Description}
 *
 * @var $2
 */
${3:protected} $4
endsnippet

snippet var_entity_type_manager_interface "Drupal var EntityTypeManagerInterface"
/**
 * Entity type manager.
 *
 * @var \Drupal\Core\Entity\EntityTypeManagerInterface
 */
protected $entityTypeManager;
$0
endsnippet

snippet var_database_connection "Drupal var Database Connection"
/**
 * Database connection.
 *
 * @var \Drupal\Core\Database\Connection
 */
protected $databaseConnection;
$0
endsnippet

snippet var_config_factory_interface "Drupal var ConfigFactoryInterface"
/**
 * The config factory.
 *
 * @var \Drupal\Core\Config\ConfigFactoryInterface
 */
protected $configFactory;
$0
endsnippet

snippet var_date_formatter_interface "Drupal var DateFormatterInterface"
/**
 * Date formatter.
 *
 * @var \Drupal\Core\Datetime\DateFormatterInterface
 */
protected $dateFormatter;
$0
endsnippet

snippet var_logger_interface "Drupal var LoggerInterface"
/**
 * Logger for a channel.
 *
 * @var \Psr\Log\LoggerInterface
 */
protected $logger;
$0
endsnippet

snippet log "Drupal logger"
\Drupal::logger('$1')->${2:notice}($3);
endsnippet

snippet logp "Drupal logger print_r"
\Drupal::logger('$1')->${2:notice}('<pre>' . print_r($3, TRUE) . '</pre>');
endsnippet

snippet file_class_standard "Drupal class, standard"
<?php

namespace Drupal\\$1

/**
 * ${2:Class description.}
 */
class $3 {

  $0

}
endsnippet

snippet file_class_interface "Drupal class interface"
<?php

namespace Drupal\\$1

/**
 * ${2:Interface.}
 */
interface $3Interface {

  $0

}
endsnippet

snippet file_test_unit "Drupal Unit Test file template"
<?php

namespace Drupal\Tests\\$1

use Drupal\Tests\UnitTestCase;

/**
 * $2
 *
 * @group ${3:group}
 * ${4:@coversDefaultClass \Drupal\ }
 */
class $5 extends UnitTestCase {

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();
  }

  /**
	 * ${6:First test description}
	 */
	public function test${7:FirstTest}() {

	}

}
endsnippet

snippet file_test_kernel "Drupal Kernel Test file template"
<?php

namespace Drupal\Tests\\$1\Kernel\\$2

use Drupal\KernelTests\KernelTestBase;

/**
 * $3
 *
 * @group ${4:group}
 * ${5:@coversDefaultClass \Drupal\ }
 */
class $6 extends KernelTestBase {

  /**
   * {@inheritdoc}
   */
  public static $modules = [
    'system',
  ];

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();
  }

  /**
   * ${7:First test description}
   */
  public function test${8:FirstTest}() {
    $9
  }

}
endsnippet

snippet class_plugin_injection "Drupal plugin injection create / construct"
  /**
   * {@inheritdoc}
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static($configuration, $plugin_id, $plugin_definition);
  }
endsnippet

snippet array_filter "PHP Array filter"
array_filter($${2:array_to_filter}, function ($${3:item}) {
  return $0
});
endsnippet

snippet array_filter_use "PHP Array filter, use"
array_filter($${2:array_to_filter}, function ($${3:item}) use ($${4:included}) {
  return $0
});
endsnippet

snippet arm "PHP Array map"
array_map(function ($${2:item}) {
  return $0
}, $${3:array_to_map});
endsnippet

snippet armu "PHP Array map, use"
array_map(function ($${2:item}) use ($${3:included}) {
  return $0
}, $${4:array_to_map});
endsnippet

snippet array_reduce "PHP Array reduce"
array_reduce($${2:array_to_reduce}, function ($${3:carry}, $${4:item}) {
  return $0
}, ${5:initial});
endsnippet

snippet array_reduce_use "PHP Array reduce, use"
array_reduce($${2:array_to_reduce}, function ($${3:carry}, $${4:item}) use ($${5:included}) {
  return $0
}, ${6:initial});
endsnippet

snippet mock_method_return_callback "Drupal mock method will returnCallback"
$${1:variable}->expects($this->any())
  ->method('${2:method_name}')
  ->will($this->returnCallback(
    function (${3:method_parameters}) {
      $0
		}
	));
endsnippet

snippet fndhu "Drupal module hook update function"
/**
 * ${1:Description of update}
 */
function ${2:mymodule}_update_${3:8000}(&$sandbox) {
  $0
}
endsnippet

snippet fndh "Drupal module hook function"
/**
 * Implements hook_${1:hook}().
 */
function ${2:mymodule}_${1:hook}($3) {
  $0
}
endsnippet

snippet fnm "Drupal module function"
/**
 * ${1:Description}
 */
function ${2:mymodule}_${3:function_name}($4) {
  $0
}
endsnippet

snippet fndp "Drupal class standard method"
/**
 * ${1:{Description of method}}
 */
${2:public} ${3:static }function $4($5) {
  $0
}
endsnippet

snippet fndpi "Drupal class inherited method"
/**
 * ${1:{@inheritdoc}}
 */
${2:public} ${3:static }function $4($5) {
  $0
}
endsnippet

snippet fndi "Drupal class interface method"
/**
 * ${1:Description}
 */
${2:public} function $3($4);
endsnippet


snippet fn "PHP function"
function ${1:name}(${2}) {
  $0
}
endsnippet

snippet fnp "PHP public function"
public function ${1:name}(${2})`!p php_braces(snip)`
`!p php_indent(snip)`$0
}
endsnippet

snippet fnps "PHP public static function"
public static function ${1:name}(${2})`!p php_braces(snip)`
`!p php_indent(snip)`$0
}
endsnippet

snippet fnpt "PHP public function test"
public function test${1:name}(${2})`!p php_braces(snip)`
`!p php_indent(snip)`$0
}
endsnippet

snippet fnr "PHP protected function"
protected function ${1:name}(${2})`!p php_braces(snip)`
`!p php_indent(snip)`$0
}
endsnippet

snippet fnv "PHP private function"
private function ${1:name}(${2})`!p php_braces(snip)`
`!p php_indent(snip)`$0
}
endsnippet

snippet fora "PHP foreach array"
foreach (${1:array} as ${2:value})`!p php_braces(snip)`
`!p php_indent(snip)`$0
}
endsnippet

snippet fork "PHP foreach array with key"
foreach (${1:array} as ${2:key} => ${3:value})`!p php_braces(snip)`
`!p php_indent(snip)`$0
}
endsnippet

snippet if "PHP if"
if ($1) {
`!p php_indent(snip)`$0
}
endsnippet

snippet ife "PHP if with else"
if ($1) {
`!p php_indent(snip)`$2
} else {
`!p php_indent(snip)`$3
}
endsnippet

snippet cc "Codeception comment"
$I->comment('$0');
endsnippet

snippet cp "Codeception pause"
$I->pause();
endsnippet

snippet ccp "Codeception comment and pause"
$I->comment('$0');
$I->pause();
endsnippet

snippet cw "Codeception wait"
$I->getDefaultWaitTime()
endsnippet

snippet def "PHP switch default"
default:
`!p php_indent(snip)`// Do nothing
`!p php_indent(snip)`break;
endsnippet

snippet ifr "PHP if with return"
if ($1) {
`!p php_indent(snip)`return ${2:true}
}
endsnippet

snippet ifi "PHP if with else if"
if ($1) {
`!p php_indent(snip)`$2
} elseif ($3) {
`!p php_indent(snip)`$0
}
endsnippet

pre_expand "convert_tokens"
snippet vt "PHP replace tokens"
endsnippet

snippet doc "PHP empty docblock"
/**
 * $0
 */
endsnippet

snippet doci "PHP Inheritdoc"
/**
 * {@inheritdoc}
 */$0
endsnippet

snippet docv "PHP var doc"
/**
 * ${1:Description}
 *
 * @var $2
 */
endsnippet

snippet db "CodeIgniter db statement"
$this->db->$0
endsnippet

snippet dbs "CodeIgniter db select statement"
$this->db->select('$0');
endsnippet

snippet dbf "CodeIgniter db from statement"
$this->db->from('$0');
endsnippet

snippet dbw "CodeIgniter db where statement"
$this->db->where($0);
endsnippet

snippet dbo "CodeIgniter db order by statement"
$this->db->order_by($0);
endsnippet

snippet dbq "CodeIgniter db query get"
$query = $this->db->get();$0
endsnippet

snippet exs "Experiment start comment"
// ---
// Experiment code start:
endsnippet

snippet exe "Experiment end comment"
// Experiment code end.
// ---
endsnippet

snippet pot "Wrap with PCOutput::text"
PCOutput::text(${VISUAL})
endsnippet

snippet poi "Wrap with PCOutput::id"
PCOutput::id(${VISUAL})
endsnippet

snippet af "assert false"
$this->assertFalse($0);
endsnippet

snippet at "assert true"
$this->assertTrue($0);
endsnippet

snippet ae "assert equals"
$this->assertEquals($0);
endsnippet

snippet ane "assert not equals"
$this->assertNotEquals($0);
endsnippet

snippet ac "assert count"
$this->assertCount($0);
endsnippet
