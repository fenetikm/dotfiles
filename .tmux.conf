# todo:
# - detach window or send window to another session - see below
# - scratch window for notes etc. ... but maybe in something via Alfred?
# - show cheat sheet for yabai / karabiner - better from Alfred?
# - visual bell, show with a dot on the tab? or a colour for the tab? probs. essentially if a script is running and finishes then show indicator that it has finished
# - view a thing, then dismiss e.g. list-keys, ephemeral vs the show_popup stuff
# - maybe a general per session / project TODO.md shortcut

# ideas and inspo
# - copy last command output - possible using the OSC markers?
# - have a pane or window with latest things to learn / try, maybe omnifocus task or other stuff not in sketchybar
# - another interesting idea uses `capture-all-panes` and finds the URLs in it and then does a thing
# - https://github.com/WaylonWalker/devtainer/blob/main/bin/.local/bin/tmux-urls
# - like the kitty thing but maybe more flexible?
# - also `freeze` has an example using tmux capture pane

# set prefix to c-a
unbind-key C-b
set -g prefix C-a

# don't rename windows automatically
set-option -g allow-rename off

set-option -g default-shell $SHELL

# these items are from https://github.com/tmux-plugins/tmux-sensible or of my own tweaking
# reduce escape time to 1ms
set -s escape-time 0

# Increase scrollback buffer size from 2000 to 50000 lines
set -g history-limit 50000

# Increase tmux messages display duration from 750ms to 4s
set -g display-time 4000

# how often to update the status, we don't need this to be fast
set -g status-interval 60 # Default is 15.

# act like vim
set -wg mode-keys vi
set -g status-keys vi

# Enable events firing on terminal focus etc.
set -g focus-events on

# Resize windows related to smallest / largest window
set -wg aggressive-resize on

# Fast switch forwards and backwards, -r to support repeat
bind -r C-p previous-window
bind -r C-n next-window

# Set ability to capture on start and restore on exit window data when running an application
set -wg alternate-screen on

set -g visual-activity off
set -g visual-bell off
set -g visual-silence on

# attach to another session when session is destroyed
set -g detach-on-destroy off

# kill a session via ctrl-q, with confirmation
bind-key C-q confirm-before -p "kill-session #S? (y/n)" kill-session

# navigate between vim and tmux, no plugin required
# checks for "not_tmux" so that j and k nav work inside of e.g. fzf when run via `v c-t`
not_tmux="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(g?(view|n?vim?x?)(diff)?|fzf)$'"
bind-key -n C-h if-shell "$not_tmux" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$not_tmux" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$not_tmux" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$not_tmux" "send-keys C-l"  "select-pane -R"

# vim style window selection... for when c-<key> doesn't make sense
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# vim like copy pasta
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi 'V' send -X select-line
# on yank, send through `pbcopy` to put into system clipboard
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle

# turn on mouse support, note plugin below
set -g mouse on

# make scrolling with wheels work
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# alternate window splitting keys
# open splits with the current path
unbind-key %
bind-key | split-window -h -c '#{pane_current_path}'
bind-key '\' split-window -h -c '#{pane_current_path}'
bind-key - split-window -v -c '#{pane_current_path}'

# create a small vertical pane at the bottom
unbind-key m
bind-key m split-window -v -l 8
bind-key C-x kill-pane

# resize pane, -r to allow repeat presses
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r H resize-pane -L 5
bind-key -r L resize-pane -R 5

# swap pane, left and right
bind-key -r "<" swap-pane -U
bind-key -r ">" swap-pane -D

# balance vetically
# tmux select-layout even-horizontal / even-vertical
bind-key '=' select-layout even-horizontal

# preset resizing
unbind-key ]
bind-key ] resize-pane -t 2 -x 70

# reload config
unbind-key r
bind-key r source-file ~/.tmux.conf \; display-message "** tmux.conf reloaded **"

# start window and pane numbering at 1
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1

# renumber windows on closing
set-option -g renumber-windows on

# Don't change tmux's own window titles
set -w -g automatic-rename off

# sesh mgmt
# bind keys to frequently used things
bind-key B run-shell 'zsh -c "$HOME/.config/tmux/sesh.sh mwblog $(echo ~blog)"'
bind-key C run-shell 'zsh -c "$HOME/.config/tmux/sesh.sh config $(echo ~/.config)"'
bind-key P run-shell 'zsh -c "$HOME/.config/tmux/sesh.sh pc $(echo ~pcp)"'
bind-key Z run-shell 'zsh -c "$HOME/.config/tmux/sesh.sh zettels $(echo ~z)"'

# open up a tree window picker via c-a
# todo: add some actions to the fzf like kill window and session
unbind-key C-a
bind-key C-a run-shell 'tmux display-popup -b rounded -w 70% -h 70% -T "Window Picker" -S bg=#020223 -E $HOME/.config/tmux/tree_picker.sh'

# open up yazi in a new window (pop-up has issues)
unbind-key y
bind-key y run-shell 'tmux new-window yazi #{pane_current_path}'

# rebuild tree hooks
set-hook -g after-new-window 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g after-rename-window 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g after-rename-session 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g after-new-session 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g session-renamed 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g window-renamed 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g session-created 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g session-closed 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'

# kill the popup session if no more other sessions
set-hook -g session-closed 'run-shell "zsh -c \"$HOME/.config/tmux/kill_popup.sh\""'
# when first opening the popup, pass it some extra config to set styles
set-hook -g after-new-session 'if -F "#{==:#{session_name},_popup_}" "source $HOME/.config/tmux/.tmux.conf.popup" ""'

# set-hook -g after-new-window 'run-shell "zsh -c \"$HOME/.config/tmux/set_popup.sh\""'
# set-hook -g after-new-session 'run-shell "zsh -c \"$HOME/.config/tmux/set_popup.sh\""'

# jump to last window, in any session
unbind-key Space
bind-key Space run-shell 'zsh -c "$HOME/.config/tmux/last.sh switch"'
set-hook -g pane-focus-out 'run-shell "zsh -c \"$HOME/.config/tmux/last.sh out #{session_name} #{window_name} #{pane_index}\""'

# update the title on focus change, shown in sketchybar
# note: not bothering to update sketchybar after this, that can lag
set-hook -g pane-focus-in 'run-shell "zsh -c \"kitty @ set-window-title ''#{session_name} / #{window_name}''\""'

# popup, for... things
bind-key u run-shell "$HOME/.config/tmux/show_popup.sh"

# use the xterm-kitty terminfo
set -g default-terminal "xterm-kitty"

# turn on 24bit colour
set -ga terminal-overrides ",xterm-kitty:Tc"

# enable underlines etc.
set -ga terminal-overrides ",xterm-kitty:smxx=\\033[9m"

# enable clipboard support, not sure if needed but hey
set -as terminal-features ',xterm-kitty:clipboard'

# undercurl support with colours
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# allow kitty to listen to things from inside tmux
set -ga update-environment 'KITTY_LISTEN_ON'

# recognise extended keys
set -s extended-keys on
set -as terminal-features 'xterm-kitty*:extkeys'

# allow bypassing tmux via special escape sequence
# go up and down through prompts
# requires OSC 133 injected into the prompt, see starship config
bind-key o {
  copy-mode -H
  send-keys -X previous-prompt
}

bind-key -T copy-mode-vi -r o {
  send-keys -X previous-prompt
}

bind-key i {
  copy-mode -H
  send-keys -X next-prompt
}

bind-key -T copy-mode-vi -r i {
  send-keys -X next-prompt
}

# pass through specific keys from kitty > tmux > nvim
# ... I think this can be done via `extended-keys-format` csi-u
bind-key -T root C-Enter send-keys Escape "[13;5u"
bind-key -T root S-Enter send-keys Escape "[13;2u"
bind-key -T root C-/ send-keys Escape "[47;5u"
bind-key -T root C-, send-keys Escape "[44;5u"
bind-key -T root C-. send-keys Escape "[46;5u"
bind-key -T root C-[ send-keys Escape "[91;5u"
bind-key -T root C-S-p send-keys Escape "[80;6u"
bind-key -T root C-S-j send-keys Escape "[74;6u"

# default falcon tmux styling
source-file ~/Documents/Work/internal/vim/colors/falcon/tmux/falcon.transparent.tmux.conf

# no number "symbols" next to window name
set -wg window-status-current-format "#[fg=white,bg=#020221] #[fg=#dfdfe5]#W#{?window_zoomed_flag,#[fg=#dfdfe5]+ ,  }"

# no numbers, no problems
set -wg window-status-format " #[fg=#57575e,bg=#020221]#W  "

# todo: change status-style when doing a thing
# set-hook -g pane-mode-changed 'if -F "#{m/r:(copy|view)-mode,#{pane_mode}}" "set status-style bg=red" "set -u status-style"'

# the following is falcon colour specific
set -g status-left "#[fg=#57575e]"
set -g status-right "#[fg=#57575e][#{session_name}] "
