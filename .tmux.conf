# todo:
# - can we get rid of reattach-to-user-namespace?
# - better new window name
# - remove tmux-sensible, replace with the actual settings
# - get rid of as many plugins as possible...
# - how to restart / killall of tmux completely
# ideas and inspo
# course: https://thoughtbot.com/upcase/tmux

# maybe a quicker way to create a new scratch window to do some stuff, close

# idea: how about llm stuff in a tmux popup?
# - want for it to persist, chat history-ish
# - have a pane or window with latest things to learn / try, maybe omnifocus task or other stuff not in sketchybar
# - another interesting idea uses `capture-all-panes` and finds the URLs in it and then does a thing
# https://github.com/WaylonWalker/devtainer/blob/main/bin/.local/bin/tmux-urls
# like the kitty thing but maybe more flexible?
# idea: capture pane into vim

# ones to jump to:
# - blog @done
# - config (nv, yabai, sketchy, hammer) @done
# - obsidian maybe? probs, for learning notes etc.
# - latest learnings / notes... bring up in display pop-up?
# - file stuff yt, down, yazi instead of finder?! etc.
# - flip? maybe some general project selector?

# prefix to a
unbind-key C-b
set -g prefix C-a

# don't rename windows automatically
set-option -g allow-rename off

set-option -g default-shell $SHELL
# note! need the ${SHELL} bit at the end, otherwise zsh doesn't run and everything breaks!
set -g default-command "reattach-to-user-namespace -l ${SHELL}"

# reduce escape time to 1ms
set -sg escape-time 1

# # Set ability to capture on start and restore on exit window data when running an application
setw -g alternate-screen on

# show all the things to jump between
bind-key s choose-tree

# show sessions to choose one
bind-key S choose-session

set -g visual-activity off
set -g visual-bell off
set -g visual-silence on

# navigate between vim and tmux
# checks for "not_tmux" so that j and k nav work inside of e.g. fzf when run via `v c-t`
not_tmux="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(g?(view|n?vim?x?)(diff)?|fzf)$'"
bind-key -n C-h if-shell "$not_tmux" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$not_tmux" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$not_tmux" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$not_tmux" "send-keys C-l"  "select-pane -R"

# act like vim
setw -g mode-keys vi
set -g status-keys vi

# vim like copy pasta
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi 'V' send -X select-line
# bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle

# turn on mouse support, note plugin below
set -g mouse on

# make scrolling with wheels work
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# nicer splitting keys
unbind-key %
# open splits with the current path
bind-key | split-window -h -c '#{pane_current_path}'
bind-key '\' split-window -h -c '#{pane_current_path}'
bind-key - split-window -v -c '#{pane_current_path}'

# create a small vertical pane at the bottom
unbind-key m
bind-key m split-window -v -l 8
bind-key C-x kill-pane

# resize pane, -r to allow repeat presses
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r H resize-pane -L 5
bind-key -r L resize-pane -R 5

# balance vetically
# tmux select-layout even-horizontal / even-vertical
bind-key '=' select-layout even-horizontal

# preset resizing
unbind-key ]
bind-key ] resize-pane -t 2 -x 70

# # Easy config reload
unbind-key r
bind-key r source-file ~/.tmux.conf \; display-message "** tmux.conf reloaded **"

#start window and pane numbering at 1
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1

# renumber windows on closing
set-option -g renumber-windows on

# Needed as on tmux 1.9 and up (defaults to off).
# Added in tmux commit c7a121cfc0137c907b7bfb.
set -g focus-events on

# But don't change tmux's own window titles.
set -w -g automatic-rename off

# sesh mgmt
bind-key B run-shell 'zsh -c "$HOME/.config/tmux/sesh.sh mwblog $(echo ~blog)"'
bind-key C run-shell 'zsh -c "$HOME/.config/tmux/sesh.sh config $(echo ~/.config)"'
bind-key P run-shell 'zsh -c "$HOME/.config/tmux/sesh.sh pc $(echo ~pcp)"'
bind-key Z run-shell 'zsh -c "$HOME/.config/tmux/sesh.sh zettels $(echo ~icloud/Docs/vaults/zettelkasten)"'

# usually previous window
# open up a window selector via c-p
unbind-key C-p
bind-key C-p run-shell 'tmux popup -b rounded -w 70% -h 70% -T "Window Picker" -E $HOME/.config/tmux/tree_picker.sh'

# rebuild tree hooks
set-hook -g after-new-window 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g after-rename-window 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g after-rename-session 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g after-new-session 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g session-renamed 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g window-renamed 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g session-created 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'
set-hook -g session-closed 'run-shell "zsh -c \"$HOME/.config/tmux/tree_rebuild.sh 1\""'

# (kill a tmux session from a list)
# alias tkill="for s in \$(tmux list-sessions | awk '{print \$1}' | rg ':' -r '' | fzy); do tmux kill-session -t \$s; done;"

# jump to last location, vim like
set-hook -g pane-focus-out 'run-shell "zsh -c \"$HOME/.config/tmux/last.sh out #{session_name} #{window_name} #{pane_index}\""'

unbind-key Space
bind-key Space run-shell 'zsh -c "$HOME/.config/tmux/last.sh switch"'

# update the title on focus change
# note: not bothering to update sketchybar after this, that can lag
set-hook -g pane-focus-in 'run-shell "zsh -c \"kitty @ set-window-title ''#{session_name} / #{window_name}''\""'

# note: to install new plugins, prefix + I (shift i)
set -g @tpm_plugins '                \
    tmux-plugins/tpm                 \
    tmux-plugins/tmux-sensible       \
    tmux-plugins/tmux-resurrect      \
    tmux-plugins/tmux-continuum      \
    tmux-plugins/tmux-yank           \
    tmux-plugins/tmux-pain-control   \
    tmux-plugins/tmux-copycat        \
    tmux-plugins/tmux-open
'

# Initialize TMUX plugin manager
run '~/.tmux/plugins/tpm/tpm'

# use the xterm-kitty terminfo
set -g default-terminal "xterm-kitty"

# turn on 24bit colour
set -ga terminal-overrides ",xterm-kitty:Tc"

# enable underlines etc.
set -ga terminal-overrides ",xterm-kitty:smxx=\\033[9m"

# undercurl support with colours
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# allow kitty to listen to things from inside tmux
set -ga update-environment 'KITTY_LISTEN_ON'

# recognise extended keys
set -s extended-keys on
set -as terminal-features 'xterm-kitty*:extkeys'

# todo: fix the bad styling of this:
# copy-mode-match-style style
#              Set the style of search matches in copy mode.  For how to specify style, see the STYLES section.
#
#      copy-mode-mark-style style
#              Set the style of the line containing the mark in copy mode.  For how to specify style, see the STYLES section.
#
#      copy-mode-current-match-style style


# go up and down through prompts
# requires OSC 133 injected into the prompt, see starship config
bind-key o {
  copy-mode -H
  send-keys -X previous-prompt
}

bind-key -T copy-mode-vi -r o {
  send-keys -X previous-prompt
}

bind-key i {
  copy-mode -H
  send-keys -X next-prompt
}

bind-key -T copy-mode-vi -r i {
  send-keys -X next-prompt
}

# pass through specific keys from kitty > tmux > nvim
bind-key -T root C-Enter send-keys Escape "[13;5u"
bind-key -T root S-Enter send-keys Escape "[13;2u"
bind-key -T root C-/ send-keys Escape "[47;5u"
bind-key -T root C-, send-keys Escape "[44;5u"
bind-key -T root C-. send-keys Escape "[46;5u"
bind-key -T root C-[ send-keys Escape "[91;5u"
bind-key -T root C-S-p send-keys Escape "[80;6u"
bind-key -T root C-S-j send-keys Escape "[74;6u"

# how often to update the status, we don't need this to be fast
set -g status-interval 60 # Default is 15.

# default falcon tmux styling
source-file ~/Documents/Work/internal/vim/colors/falcon/tmux/falcon.transparent.tmux.conf

# zoom support
# setw -g window-status-current-format "#[fg=white,bg=#020221]  #[fg=#787882]#[fg=#dfdfe5]#W#{?window_zoomed_flag,#[fg=#dfdfe5]+ ,  }"
# no numbers
setw -g window-status-current-format "#[fg=white,bg=#020221] #[fg=#787882]#[fg=#dfdfe5]#W#{?window_zoomed_flag,#[fg=#dfdfe5]+ , }"

# drop back the numbers
# setw -g window-status-format "#[fg=#57575e,bg=#020221] #I #[fg=#787882,bg=#020221]#W "
# no numbers
setw -g window-status-format " #[fg=#787882,bg=#020221]#W "

# the following is falcon colour specific
# see https://man.openbsd.org/tmux.1#FORMATS for status items
set -g status-left "#[fg=#57575e]"
# set -g status-right "#[fg=#57575e]#{user}@#{host_short} "
set -g status-right "#[fg=#57575e][#{session_name}] "
